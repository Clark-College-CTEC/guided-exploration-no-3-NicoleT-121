# Guided Exploration No. 3
# Nicole Tolmie

import random
# We will use the random library to generate a random number using the **random.randint()** method

# This line declares an empty list named possible_names
possible_names = []

# New values (output) are generated by this code and will be stored a new file, rap-names-output.txt
outputFile = open('rap-names-output.txt', 'w')

# The "with" keyword statement opens the rap-names.text file for read access
with open('rap-names.txt', 'r') as dataFile:
    # a handle named "dataFile" is assigned to the above file (a variable) and prepares "stuff" to be done on the program.
    for name in dataFile:
        # This shows what will be done in the program [with each iteration, the invisible line-feed thatâ€™s at the end of each line is stripped off using rstrip().The name is then appended (added) to the possible_names list. This list will be used later to pick random rap name elements.]
        possible_names.append(name.rstrip())

# The user is asked for the number of rap names they would like to create (as an int).
count = int(input('How many rap names would you like to create? '))
# This user is ased for the number of parts each name should contain (as an int).
parts = int(input('How many parts should the name contain? '))

# This is a counted loop that will generate the total number of rap names requested by user.
for i in range(count):
    # A new list is declared to hold rap name parts,
    name_parts = []
    # COMMENT THIS CODE - see below
    for j in range(parts):
        '''
        for each iteration, a name from possible_names list is chosen at random,
        and appended to the names_parts list. Parameters used within the random.randint() 
        method generate a number from 0 to the length of the possible_names list
        minus one because lists start at 0. The randomly generated name from the 
        possible_names list will be appended to the names_parts list.
        '''
        name_parts.append(
            possible_names[random.randint(0, len(possible_names)-1)])

    # This line is going to take(assign?) a handle to the file where we are going to write the generated names to.
    outputFile.write(f"{' '.join(name_parts)}\n")
    '''
    This line will take the contents in the list, name_parts and connect (join) them with a space (' '). 
    A new line (\n) is also added to the string.
    An f string is used to do this, the name is written in the output file,
    and also printed in the terminal.
    '''
    print(f"{' '.join(name_parts)}")

# This line closes the file using the .close file method
outputFile.close()
